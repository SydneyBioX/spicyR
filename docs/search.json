[{"path":"https://ellispatrick.github.io/spicyR/articles/deprecated/segmentedCells.html","id":"installation","dir":"Articles > Deprecated","previous_headings":"","what":"Installation","title":"Introduction to SegmentedCells","text":"","code":"if (!require(\"BiocManager\"))     install.packages(\"BiocManager\") BiocManager::install(\"spicyR\")"},{"path":"https://ellispatrick.github.io/spicyR/articles/deprecated/segmentedCells.html","id":"overview","dir":"Articles > Deprecated","previous_headings":"","what":"Overview","title":"Introduction to SegmentedCells","text":"SegmentedCells object designed store data imaging cytometry (FISH, IMC, CycIF, spatial transcriptomics, … ) already segmented reduced individual cells. SegmentedCells extends DataFrame defines methods take advantage DataFrame nesting represent various elements cell-based experiments spatial orientation commonly encountered. object able store information cell’s spatial location, cellType, morphology, intensity gene/protein marks well image level phenotype information. Ideally type data can used cell clustering, point process models nearest neighbour analysis. consider examples data formats can transformed SegmentedCells. First, load spicyR package.","code":"library(spicyR) library(S4Vectors)"},{"path":"https://ellispatrick.github.io/spicyR/articles/deprecated/segmentedCells.html","id":"example-1---data-resembles-cellprofiler-output","dir":"Articles > Deprecated","previous_headings":"","what":"Example 1 - Data resembles cellProfiler output","title":"Introduction to SegmentedCells","text":"create SegmentedCells data output cellProfiler similar programs. assumes columns string AreaShape_ Intensity_Mean ObjectNumber ImageNumber columns. create toy cellProfiler data. can create SegmentedCells object. Extract cellSummary information overwrite well. can set cell types cell extracting clustering marker intensity information.","code":"### Something that resembles cellProfiler data  set.seed(51773)  n = 10  cells <- data.frame(row.names = seq_len(n)) cells$ObjectNumber <- seq_len(n) cells$ImageNumber <- rep(1:2,c(n/2,n/2)) cells$AreaShape_Center_X <- runif(n) cells$AreaShape_Center_Y <- runif(n) cells$AreaShape_round <- rexp(n) cells$AreaShape_diameter <- rexp(n, 2) cells$Intensity_Mean_CD8 <- rexp(n, 10) cells$Intensity_Mean_CD4 <- rexp(n, 10) cellExp <- SegmentedCells(cells, cellProfiler = TRUE) #> There is no cellType column, setting to NA #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. cellExp #> A SegmentedCells object with... #> Number of images:2 #> Number of cells:10 #> Number of cell types: 1 [ NA ] #> Number of intensities: 2 [ CD8, CD4 ] #> Number of morphologies: 2 [ round, diameter ] #> Number of image phenotypes: 0 [ ] cellSum <- cellSummary(cellExp) head(cellSum) #> DataFrame with 6 rows and 6 columns #>    imageID      cellID imageCellID         x         y cellType #>   <factor> <character> <character> <numeric> <numeric> <factor> #> 1        1      cell_1      cell_1  0.367243  0.820150       NA #> 2        1      cell_2      cell_2  0.613818  0.846200       NA #> 3        1      cell_3      cell_3  0.335930  0.318286       NA #> 4        1      cell_4      cell_4  0.501737  0.373931       NA #> 5        1      cell_5      cell_5  0.829350  0.140415       NA #> 6        2      cell_6      cell_6  0.831271  0.175128       NA  cellSummary(cellExp) <- cellSum markers <- cellMarks(cellExp) kM <- kmeans(markers,2) cellType(cellExp) <- paste('cluster',kM$cluster, sep = '')  cellSum <- cellSummary(cellExp) head(cellSum) #> DataFrame with 6 rows and 6 columns #>    imageID      cellID imageCellID         x         y cellType #>   <factor> <character> <character> <numeric> <numeric> <factor> #> 1        1      cell_1      cell_1  0.367243  0.820150 cluster1 #> 2        1      cell_2      cell_2  0.613818  0.846200 cluster1 #> 3        1      cell_3      cell_3  0.335930  0.318286 cluster2 #> 4        1      cell_4      cell_4  0.501737  0.373931 cluster2 #> 5        1      cell_5      cell_5  0.829350  0.140415 cluster1 #> 6        2      cell_6      cell_6  0.831271  0.175128 cluster1"},{"path":"https://ellispatrick.github.io/spicyR/articles/deprecated/segmentedCells.html","id":"example-2---three-pancreatic-islets-from-from-damond-et-al-2019","dir":"Articles > Deprecated","previous_headings":"","what":"Example 2 - Three pancreatic islets from from Damond et al (2019)","title":"Introduction to SegmentedCells","text":"Read data. can create SegmentedCells object. can set cell types cell extracting clustering marker intensity information. simple plot ggplot showing spatial distribution cell types","code":"isletFile <- system.file(\"extdata\",\"isletCells.txt.gz\", package = \"spicyR\") cells <- read.table(isletFile, header = TRUE) cellExp <- SegmentedCells(cells, cellProfiler = TRUE) #> There is no cellType column, setting to NA #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. cellExp #> A SegmentedCells object with... #> Number of images:1 #> Number of cells:4650 #> Number of cell types: 1 [ NA ] #> Number of intensities: 38 [ c1, c10, ..., c9 ] #> Number of morphologies: 15 [ Area, Compactness, ..., Solidity ] #> Number of image phenotypes: 0 [ ] markers <- cellMarks(cellExp) kM <- kmeans(markers,4) cellType(cellExp) <- paste('cluster',kM$cluster, sep = '')  cellSum <- cellSummary(cellExp) head(cellSum) #> DataFrame with 6 rows and 6 columns #>    imageID      cellID imageCellID         x         y cellType #>   <factor> <character> <character> <integer> <integer> <factor> #> 1        1      cell_1      cell_1        53         0 cluster1 #> 2        1      cell_2      cell_2       128         0 cluster1 #> 3        1      cell_3      cell_3       135         0 cluster1 #> 4        1      cell_4      cell_4       450         0 cluster1 #> 5        1      cell_5      cell_5       458         0 cluster3 #> 6        1      cell_6      cell_6       551         0 cluster3 plot(cellExp, imageID=1)"},{"path":"https://ellispatrick.github.io/spicyR/articles/deprecated/segmentedCells.html","id":"example-3---custom-markerintensity-and-morphology-column-names","dir":"Articles > Deprecated","previous_headings":"","what":"Example 3 - Custom markerintensity and morphology column names","title":"Introduction to SegmentedCells","text":"create toy data slightly fluid naming stucture. can create SegmentedCells object. Extract morphology information","code":"set.seed(51773)  n = 10  cells <- data.frame(row.names = seq_len(n)) cells$cellID <- seq_len(n) cells$imageCellID <- rep(seq_len(n/2),2) cells$imageID <- rep(1:2,c(n/2,n/2)) cells$x <- runif(n) cells$y <- runif(n) cells$shape_round <- rexp(n) cells$shape_diameter <- rexp(n, 2) cells$intensity_CD8 <- rexp(n, 10) cells$intensity_CD4 <- rexp(n, 10) cells$cellType <- paste('cluster',sample(1:2,n,replace = TRUE), sep = '_') cellExp <- SegmentedCells(cells,                            cellTypeString = 'cellType',                            intensityString = 'intensity_',                            morphologyString = 'shape_') #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. cellExp #> A SegmentedCells object with... #> Number of images:2 #> Number of cells:10 #> Number of cell types: 2 [ cluster_1, cluster_2 ] #> Number of intensities: 2 [ CD8, CD4 ] #> Number of morphologies: 2 [ round, diameter ] #> Number of image phenotypes: 0 [ ] morph <- cellMorph(cellExp) head(morph) #> DataFrame with 6 rows and 2 columns #>       round  diameter #>   <numeric> <numeric> #> 1  0.489959 1.3913000 #> 2  3.601540 0.3670445 #> 3  0.243015 0.0149731 #> 4  0.077238 1.1434083 #> 5  0.639661 0.0043457 #> 6  0.498723 0.0341195"},{"path":"https://ellispatrick.github.io/spicyR/articles/deprecated/segmentedCells.html","id":"phenotype-information","dir":"Articles > Deprecated","previous_headings":"Example 3 - Custom markerintensity and morphology column names","what":"Phenotype information","title":"Introduction to SegmentedCells","text":"can also include phenotype information image. Create corresponding toy phenotype information must imageID variable.","code":"phenoData <- DataFrame(imageID = c('1','2'),                         age = c(21,81),                         status = c('dead','alive')) imagePheno(cellExp) <- phenoData imagePheno(cellExp) #> DataFrame with 2 rows and 3 columns #>       imageID       age      status #>   <character> <numeric> <character> #> 1           1        21        dead #> 2           2        81       alive imagePheno(cellExp, expand = TRUE) #> DataFrame with 10 rows and 3 columns #>       imageID       age      status #>   <character> <numeric> <character> #> 1           1        21        dead #> 1           1        21        dead #> 1           1        21        dead #> 1           1        21        dead #> 1           1        21        dead #> 2           2        81       alive #> 2           2        81       alive #> 2           2        81       alive #> 2           2        81       alive #> 2           2        81       alive"},{"path":"https://ellispatrick.github.io/spicyR/articles/deprecated/segmentedCells.html","id":"example-4---minimal-example-cells-only-have-spatial-coordinates","dir":"Articles > Deprecated","previous_headings":"","what":"Example 4 - Minimal example, cells only have spatial coordinates","title":"Introduction to SegmentedCells","text":"generate data know location cell. Extract cellSummary information now also cellIDs imageIDs.","code":"set.seed(51773)  n = 10  cells <- data.frame(row.names = seq_len(n)) cells$x <- runif(n) cells$y <- runif(n) cellExp <- SegmentedCells(cells) #> There is no cellType column, setting to NA #> There is no cellID. I'll create these #> There is no image specific imageCellID. I'll create these #> There is no imageID. I'll assume this is only one image and create an arbitrary imageID cellExp #> A SegmentedCells object with... #> Number of images:1 #> Number of cells:10 #> Number of cell types: 1 [ NA ] #> Number of intensities: 0 [ ] #> Number of morphologies: 0 [ ] #> Number of image phenotypes: 0 [ ] cellSum <- cellSummary(cellExp) head(cellSum) #> DataFrame with 6 rows and 6 columns #>    imageID      cellID imageCellID         x         y cellType #>   <factor> <character> <character> <numeric> <numeric> <factor> #> 1   image1      cell_1      cell_1  0.367243  0.820150       NA #> 2   image1      cell_2      cell_2  0.613818  0.846200       NA #> 3   image1      cell_3      cell_3  0.335930  0.318286       NA #> 4   image1      cell_4      cell_4  0.501737  0.373931       NA #> 5   image1      cell_5      cell_5  0.829350  0.140415       NA #> 6   image1      cell_6      cell_6  0.831271  0.175128       NA"},{"path":"https://ellispatrick.github.io/spicyR/articles/deprecated/segmentedCells.html","id":"sessioninfo","dir":"Articles > Deprecated","previous_headings":"","what":"sessionInfo()","title":"Introduction to SegmentedCells","text":"","code":"sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: EndeavourOS #>  #> Matrix products: default #> BLAS:   /usr/lib/libblas.so.3.11.0 #> LAPACK: /usr/lib/liblapack.so.3.11.0 #>  #> locale: #>  [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8     #>  [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8    #>  [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] S4Vectors_0.36.0    BiocGenerics_0.44.0 spicyR_1.11.2       #> [4] BiocStyle_2.26.0    #>  #> loaded via a namespace (and not attached): #>   [1] SpatialExperiment_1.8.0     minqa_1.2.5                 #>   [3] colorspace_2.0-3            deldir_1.0-6                #>   [5] rjson_0.2.21                rprojroot_2.0.3             #>   [7] scuttle_1.8.0               XVector_0.38.0              #>   [9] GenomicRanges_1.50.1        fs_1.5.2                    #>  [11] spatstat.data_3.0-0         farver_2.1.1                #>  [13] fansi_1.0.3                 codetools_0.2-18            #>  [15] splines_4.2.2               R.methodsS3_1.8.2           #>  [17] sparseMatrixStats_1.10.0    cachem_1.0.6                #>  [19] knitr_1.40                  polyclip_1.10-4             #>  [21] jsonlite_1.8.3              nloptr_2.0.3                #>  [23] R.oo_1.25.0                 pheatmap_1.0.12             #>  [25] spatstat.sparse_3.0-0       ggforce_0.4.1               #>  [27] HDF5Array_1.26.0            BiocManager_1.30.19         #>  [29] compiler_4.2.2              dqrng_0.3.0                 #>  [31] assertthat_0.2.1            Matrix_1.5-3                #>  [33] fastmap_1.1.0               limma_3.54.0                #>  [35] cli_3.4.1                   tweenr_2.0.2                #>  [37] htmltools_0.5.3             tools_4.2.2                 #>  [39] lmerTest_3.1-3              gtable_0.3.1                #>  [41] glue_1.6.2                  GenomeInfoDbData_1.2.9      #>  [43] dplyr_1.0.10                Rcpp_1.0.9                  #>  [45] Biobase_2.58.0              jquerylib_0.1.4             #>  [47] pkgdown_2.0.6               vctrs_0.5.0                 #>  [49] rhdf5filters_1.10.0         spatstat.explore_3.0-5      #>  [51] nlme_3.1-160                DelayedMatrixStats_1.20.0   #>  [53] spatstat.random_3.0-1       xfun_0.34                   #>  [55] stringr_1.4.1               beachmat_2.14.0             #>  [57] lme4_1.1-31                 lifecycle_1.0.3             #>  [59] goftest_1.2-3               scam_1.2-13                 #>  [61] edgeR_3.40.0                zlibbioc_1.44.0             #>  [63] MASS_7.3-58.1               scales_1.2.1                #>  [65] ragg_1.2.4                  MatrixGenerics_1.10.0       #>  [67] spatstat.utils_3.0-1        parallel_4.2.2              #>  [69] SummarizedExperiment_1.28.0 rhdf5_2.42.0                #>  [71] RColorBrewer_1.1-3          SingleCellExperiment_1.20.0 #>  [73] yaml_2.3.6                  memoise_2.0.1               #>  [75] ggplot2_3.4.0               sass_0.4.2                  #>  [77] stringi_1.7.8               highr_0.9                   #>  [79] desc_1.4.2                  boot_1.3-28                 #>  [81] BiocParallel_1.32.1         GenomeInfoDb_1.34.3         #>  [83] rlang_1.0.6                 pkgconfig_2.0.3             #>  [85] systemfonts_1.0.4           matrixStats_0.62.0          #>  [87] bitops_1.0-7                evaluate_0.18               #>  [89] lattice_0.20-45             tensor_1.5                  #>  [91] purrr_0.3.5                 Rhdf5lib_1.20.0             #>  [93] labeling_0.4.2              tidyselect_1.2.0            #>  [95] magrittr_2.0.3              bookdown_0.30               #>  [97] R6_2.5.1                    IRanges_2.32.0              #>  [99] magick_2.7.3                generics_0.1.3              #> [101] DelayedArray_0.24.0         DBI_1.1.3                   #> [103] pillar_1.8.1                withr_2.5.0                 #> [105] mgcv_1.8-41                 abind_1.4-5                 #> [107] RCurl_1.98-1.9              tibble_3.1.8                #> [109] DropletUtils_1.18.0         utf8_1.2.2                  #> [111] spatstat.geom_3.0-3         rmarkdown_2.18              #> [113] locfit_1.5-9.6              grid_4.2.2                  #> [115] data.table_1.14.4           digest_0.6.30               #> [117] tidyr_1.2.1                 numDeriv_2016.8-1.1         #> [119] R.utils_2.12.2              textshaping_0.3.6           #> [121] munsell_0.5.0               concaveman_1.1.0            #> [123] bslib_0.4.1"},{"path":"https://ellispatrick.github.io/spicyR/articles/segmentedCells.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to SegmentedCells","text":"","code":"if (!require(\"BiocManager\"))     install.packages(\"BiocManager\") BiocManager::install(\"spicyR\")"},{"path":"https://ellispatrick.github.io/spicyR/articles/segmentedCells.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to SegmentedCells","text":"SegmentedCells object designed store data imaging cytometry (FISH, IMC, CycIF, spatial transcriptomics, … ) already segmented reduced individual cells. SegmentedCells extends DataFrame defines methods take advantage DataFrame nesting represent various elements cell-based experiments spatial orientation commonly encountered. object able store information cell’s spatial location, cellType, morphology, intensity gene/protein marks well image level phenotype information. Ideally type data can used cell clustering, point process models nearest neighbour analysis. consider examples data formats can transformed SegmentedCells. First, load spicyR package.","code":"library(spicyR) library(S4Vectors)"},{"path":"https://ellispatrick.github.io/spicyR/articles/segmentedCells.html","id":"example-1---data-resembles-cellprofiler-output","dir":"Articles","previous_headings":"","what":"Example 1 - Data resembles cellProfiler output","title":"Introduction to SegmentedCells","text":"create SegmentedCells data output cellProfiler similar programs. assumes columns string AreaShape_ Intensity_Mean ObjectNumber ImageNumber columns. create toy cellProfiler data. can create SegmentedCells object. Extract cellSummary information overwrite well. can set cell types cell extracting clustering marker intensity information.","code":"### Something that resembles cellProfiler data  set.seed(51773)  n = 10  cells <- data.frame(row.names = seq_len(n)) cells$ObjectNumber <- seq_len(n) cells$ImageNumber <- rep(1:2,c(n/2,n/2)) cells$AreaShape_Center_X <- runif(n) cells$AreaShape_Center_Y <- runif(n) cells$AreaShape_round <- rexp(n) cells$AreaShape_diameter <- rexp(n, 2) cells$Intensity_Mean_CD8 <- rexp(n, 10) cells$Intensity_Mean_CD4 <- rexp(n, 10) cellExp <- SegmentedCells(cells, cellProfiler = TRUE) #> There is no cellType column, setting to NA #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. cellExp #> A SegmentedCells object with... #> Number of images:2 #> Number of cells:10 #> Number of cell types: 1 [ NA ] #> Number of intensities: 2 [ CD8, CD4 ] #> Number of morphologies: 2 [ round, diameter ] #> Number of image phenotypes: 0 [ ] cellSum <- cellSummary(cellExp) head(cellSum) #> DataFrame with 6 rows and 6 columns #>    imageID      cellID imageCellID         x         y cellType #>   <factor> <character> <character> <numeric> <numeric> <factor> #> 1        1      cell_1      cell_1  0.367243  0.820150       NA #> 2        1      cell_2      cell_2  0.613818  0.846200       NA #> 3        1      cell_3      cell_3  0.335930  0.318286       NA #> 4        1      cell_4      cell_4  0.501737  0.373931       NA #> 5        1      cell_5      cell_5  0.829350  0.140415       NA #> 6        2      cell_6      cell_6  0.831271  0.175128       NA  cellSummary(cellExp) <- cellSum markers <- cellMarks(cellExp) kM <- kmeans(markers,2) cellType(cellExp) <- paste('cluster',kM$cluster, sep = '')  cellSum <- cellSummary(cellExp) head(cellSum) #> DataFrame with 6 rows and 6 columns #>    imageID      cellID imageCellID         x         y cellType #>   <factor> <character> <character> <numeric> <numeric> <factor> #> 1        1      cell_1      cell_1  0.367243  0.820150 cluster1 #> 2        1      cell_2      cell_2  0.613818  0.846200 cluster1 #> 3        1      cell_3      cell_3  0.335930  0.318286 cluster2 #> 4        1      cell_4      cell_4  0.501737  0.373931 cluster2 #> 5        1      cell_5      cell_5  0.829350  0.140415 cluster1 #> 6        2      cell_6      cell_6  0.831271  0.175128 cluster1"},{"path":"https://ellispatrick.github.io/spicyR/articles/segmentedCells.html","id":"example-2---three-pancreatic-islets-from-from-damond-et-al-2019","dir":"Articles","previous_headings":"","what":"Example 2 - Three pancreatic islets from from Damond et al (2019)","title":"Introduction to SegmentedCells","text":"Read data. can create SegmentedCells object. can set cell types cell extracting clustering marker intensity information. simple plot ggplot showing spatial distribution cell types","code":"isletFile <- system.file(\"extdata\",\"isletCells.txt.gz\", package = \"spicyR\") cells <- read.table(isletFile, header = TRUE) cellExp <- SegmentedCells(cells, cellProfiler = TRUE) #> There is no cellType column, setting to NA #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. cellExp #> A SegmentedCells object with... #> Number of images:1 #> Number of cells:4650 #> Number of cell types: 1 [ NA ] #> Number of intensities: 38 [ c1, c10, ..., c9 ] #> Number of morphologies: 15 [ Area, Compactness, ..., Solidity ] #> Number of image phenotypes: 0 [ ] markers <- cellMarks(cellExp) kM <- kmeans(markers,4) cellType(cellExp) <- paste('cluster',kM$cluster, sep = '')  cellSum <- cellSummary(cellExp) head(cellSum) #> DataFrame with 6 rows and 6 columns #>    imageID      cellID imageCellID         x         y cellType #>   <factor> <character> <character> <integer> <integer> <factor> #> 1        1      cell_1      cell_1        53         0 cluster1 #> 2        1      cell_2      cell_2       128         0 cluster1 #> 3        1      cell_3      cell_3       135         0 cluster1 #> 4        1      cell_4      cell_4       450         0 cluster1 #> 5        1      cell_5      cell_5       458         0 cluster3 #> 6        1      cell_6      cell_6       551         0 cluster3 plot(cellExp, imageID=1)"},{"path":"https://ellispatrick.github.io/spicyR/articles/segmentedCells.html","id":"example-3---custom-markerintensity-and-morphology-column-names","dir":"Articles","previous_headings":"","what":"Example 3 - Custom markerintensity and morphology column names","title":"Introduction to SegmentedCells","text":"create toy data slightly fluid naming stucture. can create SegmentedCells object. Extract morphology information","code":"set.seed(51773)  n = 10  cells <- data.frame(row.names = seq_len(n)) cells$cellID <- seq_len(n) cells$imageCellID <- rep(seq_len(n/2),2) cells$imageID <- rep(1:2,c(n/2,n/2)) cells$x <- runif(n) cells$y <- runif(n) cells$shape_round <- rexp(n) cells$shape_diameter <- rexp(n, 2) cells$intensity_CD8 <- rexp(n, 10) cells$intensity_CD4 <- rexp(n, 10) cells$cellType <- paste('cluster',sample(1:2,n,replace = TRUE), sep = '_') cellExp <- SegmentedCells(cells,                            cellTypeString = 'cellType',                            intensityString = 'intensity_',                            morphologyString = 'shape_') #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. cellExp #> A SegmentedCells object with... #> Number of images:2 #> Number of cells:10 #> Number of cell types: 2 [ cluster_1, cluster_2 ] #> Number of intensities: 2 [ CD8, CD4 ] #> Number of morphologies: 2 [ round, diameter ] #> Number of image phenotypes: 0 [ ] morph <- cellMorph(cellExp) head(morph) #> DataFrame with 6 rows and 2 columns #>       round  diameter #>   <numeric> <numeric> #> 1  0.489959 1.3913000 #> 2  3.601540 0.3670445 #> 3  0.243015 0.0149731 #> 4  0.077238 1.1434083 #> 5  0.639661 0.0043457 #> 6  0.498723 0.0341195"},{"path":"https://ellispatrick.github.io/spicyR/articles/segmentedCells.html","id":"phenotype-information","dir":"Articles","previous_headings":"Example 3 - Custom markerintensity and morphology column names","what":"Phenotype information","title":"Introduction to SegmentedCells","text":"can also include phenotype information image. Create corresponding toy phenotype information must imageID variable.","code":"phenoData <- DataFrame(imageID = c('1','2'),                         age = c(21,81),                         status = c('dead','alive')) imagePheno(cellExp) <- phenoData imagePheno(cellExp) #> DataFrame with 2 rows and 3 columns #>       imageID       age      status #>   <character> <numeric> <character> #> 1           1        21        dead #> 2           2        81       alive imagePheno(cellExp, expand = TRUE) #> DataFrame with 10 rows and 3 columns #>       imageID       age      status #>   <character> <numeric> <character> #> 1           1        21        dead #> 1           1        21        dead #> 1           1        21        dead #> 1           1        21        dead #> 1           1        21        dead #> 2           2        81       alive #> 2           2        81       alive #> 2           2        81       alive #> 2           2        81       alive #> 2           2        81       alive"},{"path":"https://ellispatrick.github.io/spicyR/articles/segmentedCells.html","id":"example-4---minimal-example-cells-only-have-spatial-coordinates","dir":"Articles","previous_headings":"","what":"Example 4 - Minimal example, cells only have spatial coordinates","title":"Introduction to SegmentedCells","text":"generate data know location cell. Extract cellSummary information now also cellIDs imageIDs.","code":"set.seed(51773)  n = 10  cells <- data.frame(row.names = seq_len(n)) cells$x <- runif(n) cells$y <- runif(n) cellExp <- SegmentedCells(cells) #> There is no cellType column, setting to NA #> There is no cellID. I'll create these #> There is no image specific imageCellID. I'll create these #> There is no imageID. I'll assume this is only one image and create an arbitrary imageID cellExp #> A SegmentedCells object with... #> Number of images:1 #> Number of cells:10 #> Number of cell types: 1 [ NA ] #> Number of intensities: 0 [ ] #> Number of morphologies: 0 [ ] #> Number of image phenotypes: 0 [ ] cellSum <- cellSummary(cellExp) head(cellSum) #> DataFrame with 6 rows and 6 columns #>    imageID      cellID imageCellID         x         y cellType #>   <factor> <character> <character> <numeric> <numeric> <factor> #> 1   image1      cell_1      cell_1  0.367243  0.820150       NA #> 2   image1      cell_2      cell_2  0.613818  0.846200       NA #> 3   image1      cell_3      cell_3  0.335930  0.318286       NA #> 4   image1      cell_4      cell_4  0.501737  0.373931       NA #> 5   image1      cell_5      cell_5  0.829350  0.140415       NA #> 6   image1      cell_6      cell_6  0.831271  0.175128       NA"},{"path":"https://ellispatrick.github.io/spicyR/articles/segmentedCells.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"Introduction to SegmentedCells","text":"","code":"sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: EndeavourOS #>  #> Matrix products: default #> BLAS:   /usr/lib/libblas.so.3.11.0 #> LAPACK: /usr/lib/liblapack.so.3.11.0 #>  #> locale: #>  [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8     #>  [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8    #>  [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] S4Vectors_0.36.0    BiocGenerics_0.44.0 spicyR_1.11.2       #> [4] BiocStyle_2.26.0    #>  #> loaded via a namespace (and not attached): #>   [1] SpatialExperiment_1.8.0     minqa_1.2.5                 #>   [3] colorspace_2.0-3            deldir_1.0-6                #>   [5] rjson_0.2.21                rprojroot_2.0.3             #>   [7] scuttle_1.8.0               XVector_0.38.0              #>   [9] GenomicRanges_1.50.1        fs_1.5.2                    #>  [11] spatstat.data_3.0-0         farver_2.1.1                #>  [13] fansi_1.0.3                 codetools_0.2-18            #>  [15] splines_4.2.2               R.methodsS3_1.8.2           #>  [17] sparseMatrixStats_1.10.0    cachem_1.0.6                #>  [19] knitr_1.40                  polyclip_1.10-4             #>  [21] jsonlite_1.8.3              nloptr_2.0.3                #>  [23] R.oo_1.25.0                 pheatmap_1.0.12             #>  [25] spatstat.sparse_3.0-0       ggforce_0.4.1               #>  [27] HDF5Array_1.26.0            BiocManager_1.30.19         #>  [29] compiler_4.2.2              dqrng_0.3.0                 #>  [31] assertthat_0.2.1            Matrix_1.5-3                #>  [33] fastmap_1.1.0               limma_3.54.0                #>  [35] cli_3.4.1                   tweenr_2.0.2                #>  [37] htmltools_0.5.3             tools_4.2.2                 #>  [39] lmerTest_3.1-3              gtable_0.3.1                #>  [41] glue_1.6.2                  GenomeInfoDbData_1.2.9      #>  [43] dplyr_1.0.10                Rcpp_1.0.9                  #>  [45] Biobase_2.58.0              jquerylib_0.1.4             #>  [47] pkgdown_2.0.6               vctrs_0.5.0                 #>  [49] rhdf5filters_1.10.0         spatstat.explore_3.0-5      #>  [51] nlme_3.1-160                DelayedMatrixStats_1.20.0   #>  [53] spatstat.random_3.0-1       xfun_0.34                   #>  [55] stringr_1.4.1               beachmat_2.14.0             #>  [57] lme4_1.1-31                 lifecycle_1.0.3             #>  [59] goftest_1.2-3               scam_1.2-13                 #>  [61] edgeR_3.40.0                zlibbioc_1.44.0             #>  [63] MASS_7.3-58.1               scales_1.2.1                #>  [65] ragg_1.2.4                  MatrixGenerics_1.10.0       #>  [67] spatstat.utils_3.0-1        parallel_4.2.2              #>  [69] SummarizedExperiment_1.28.0 rhdf5_2.42.0                #>  [71] RColorBrewer_1.1-3          SingleCellExperiment_1.20.0 #>  [73] yaml_2.3.6                  memoise_2.0.1               #>  [75] ggplot2_3.4.0               sass_0.4.2                  #>  [77] stringi_1.7.8               highr_0.9                   #>  [79] desc_1.4.2                  boot_1.3-28                 #>  [81] BiocParallel_1.32.1         GenomeInfoDb_1.34.3         #>  [83] rlang_1.0.6                 pkgconfig_2.0.3             #>  [85] systemfonts_1.0.4           matrixStats_0.62.0          #>  [87] bitops_1.0-7                evaluate_0.18               #>  [89] lattice_0.20-45             tensor_1.5                  #>  [91] purrr_0.3.5                 Rhdf5lib_1.20.0             #>  [93] labeling_0.4.2              tidyselect_1.2.0            #>  [95] magrittr_2.0.3              bookdown_0.30               #>  [97] R6_2.5.1                    IRanges_2.32.0              #>  [99] magick_2.7.3                generics_0.1.3              #> [101] DelayedArray_0.24.0         DBI_1.1.3                   #> [103] pillar_1.8.1                withr_2.5.0                 #> [105] mgcv_1.8-41                 abind_1.4-5                 #> [107] RCurl_1.98-1.9              tibble_3.1.8                #> [109] DropletUtils_1.18.0         utf8_1.2.2                  #> [111] spatstat.geom_3.0-3         rmarkdown_2.18              #> [113] locfit_1.5-9.6              grid_4.2.2                  #> [115] data.table_1.14.4           digest_0.6.30               #> [117] tidyr_1.2.1                 numDeriv_2016.8-1.1         #> [119] R.utils_2.12.2              textshaping_0.3.6           #> [121] munsell_0.5.0               concaveman_1.1.0            #> [123] bslib_0.4.1"},{"path":"https://ellispatrick.github.io/spicyR/articles/spicyR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Spatial Mixed-Effects Modelling with spicy","text":"","code":"if (!require(\"BiocManager\")) {   install.packages(\"BiocManager\") } BiocManager::install(\"spicyR\")"},{"path":"https://ellispatrick.github.io/spicyR/articles/spicyR.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Spatial Mixed-Effects Modelling with spicy","text":"guide provide step--step guide mixed effects models can applied multiple segmented labelled images identify localisation different cell types can change across different conditions. , subject modelled random effect, different conditions modelled fixed effect.","code":""},{"path":"https://ellispatrick.github.io/spicyR/articles/spicyR.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example data","title":"Spatial Mixed-Effects Modelling with spicy","text":", use subset Damond et al 2019 imaging mass cytometry dataset. compare spatial distributions cells pancreatic islets individuals early onset diabetes healthy controls. diabetesData_SCE SingleCellExperiment object containing single-cell data 160 images 8 subjects, 20 images per subjects. data set, cell types include immune cell types (B cells, naive T cells, T Helper cells, T cytotoxic cells, neutrophils, macrophages) pancreatic islet cells (alpha, beta, gamma, delta).","code":"data(\"diabetesData_SCE\") diabetesData_SCE #> class: SingleCellExperiment  #> dim: 0 253777  #> metadata(0): #> assays(0): #> rownames: NULL #> rowData names(0): #> colnames: NULL #> colData names(11): imageID cellID ... group stage #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://ellispatrick.github.io/spicyR/articles/spicyR.html","id":"mixed-effects-modelling","dir":"Articles","previous_headings":"","what":"Mixed Effects Modelling","title":"Spatial Mixed-Effects Modelling with spicy","text":"investigate changes localisation two different cell types, measure level localisation two cell types modelling L-function. Specifically, mean difference obtained function theoretical function used measure level localisation. Differences statistic two conditions modelled using weighted mixed effects model, condition fixed effect subject random effect.","code":""},{"path":"https://ellispatrick.github.io/spicyR/articles/spicyR.html","id":"testing-for-change-in-localisation-for-a-specific-pair-of-cells","dir":"Articles","previous_headings":"Mixed Effects Modelling","what":"Testing for change in localisation for a specific pair of cells","title":"Spatial Mixed-Effects Modelling with spicy","text":"Firstly, can test whether one cell type tends localised another cell type one condition compared . can done using spicy() function, include condition, subject. example, want see whether Delta cells () tend found around Beta cells () onset diabetes images compared non-diabetic images. obtain spicy object details results mixed effects modelling performed. coefficient spicyTest positive, find Th cells cells likely found near beta cells onset diabetes group compared non-diabetic control.","code":"spicyTestPair <- spicy(   diabetesData_SCE,   condition = \"stage\",   subject = \"case\",   from = \"beta\",   to = \"delta\" )  topPairs(spicyTestPair) #>             intercept coefficient     p.value  adj.pvalue from    to #> beta__delta   179.729   -58.24478 0.000109702 0.000109702 beta delta"},{"path":"https://ellispatrick.github.io/spicyR/articles/spicyR.html","id":"test-for-change-in-localisation-for-all-pairwise-cell-combinations","dir":"Articles","previous_headings":"Mixed Effects Modelling","what":"Test for change in localisation for all pairwise cell combinations","title":"Spatial Mixed-Effects Modelling with spicy","text":", can perform pairwise combinations cell types excluding parameters spicy(). , obtain spicy object outlines result mixed effects models performed pairwise combination cell types. can represent heatmap using signifPlot() function providing spicy object obtained.","code":"spicyTest <- spicy(   diabetesData_SCE,   condition = \"stage\",   subject = \"case\" )  spicyTest #>         conditionOnset conditionLong-duration  #>                      0                     15 topPairs(spicyTest) #>                          intercept coefficient      p.value adj.pvalue #> beta__delta           1.815458e+02  -48.735693 0.0005033247 0.07169649 #> delta__beta           1.817943e+02  -48.166076 0.0005601288 0.07169649 #> B__unknown            2.885037e-15   11.770938 0.0052338392 0.42051606 #> delta__delta          2.089550e+02  -52.061196 0.0125129422 0.42051606 #> unknown__macrophage   1.007337e+01  -15.826919 0.0207410908 0.42051606 #> unknown__B            5.899351e-15   12.142848 0.0225855404 0.42051606 #> macrophage__unknown   1.004424e+01  -14.471666 0.0244668075 0.42051606 #> B__Th                 6.285916e-15   26.847934 0.0245039854 0.42051606 #> otherimmune__naiveTc -9.292508e+00   33.584755 0.0255812944 0.42051606 #> ductal__ductal        1.481580e+01   -8.632569 0.0266935703 0.42051606 #>                             from         to #> beta__delta                 beta      delta #> delta__beta                delta       beta #> B__unknown                     B    unknown #> delta__delta               delta      delta #> unknown__macrophage      unknown macrophage #> unknown__B               unknown          B #> macrophage__unknown   macrophage    unknown #> B__Th                          B         Th #> otherimmune__naiveTc otherimmune    naiveTc #> ductal__ductal            ductal     ductal signifPlot(   spicyTest,   breaks = c(-3, 3, 1),   marksToPlot = c(     \"alpha\", \"beta\", \"gamma\", \"delta\",     \"B\", \"naiveTc\", \"Th\", \"Tc\", \"neutrophil\", \"macrophage\"   ) )"},{"path":"https://ellispatrick.github.io/spicyR/articles/spicyR.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"Spatial Mixed-Effects Modelling with spicy","text":"","code":"sessionInfo() #> R version 4.3.1 (2023-06-16 ucrt) #> Platform: x86_64-w64-mingw32/x64 (64-bit) #> Running under: Windows 11 x64 (build 22621) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_Australia.utf8  LC_CTYPE=English_Australia.utf8    #> [3] LC_MONETARY=English_Australia.utf8 LC_NUMERIC=C                       #> [5] LC_TIME=English_Australia.utf8     #>  #> time zone: Australia/Sydney #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2 #>  [3] Biobase_2.60.0              GenomicRanges_1.52.0        #>  [5] GenomeInfoDb_1.36.2         IRanges_2.34.0              #>  [7] S4Vectors_0.38.1            BiocGenerics_0.46.0         #>  [9] MatrixGenerics_1.12.3       matrixStats_1.0.0           #> [11] ggplot2_3.4.3               spicyR_1.12.1               #> [13] BiocStyle_2.28.0            #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3          rstudioapi_0.15.0           #>   [3] jsonlite_1.8.7              MultiAssayExperiment_1.26.0 #>   [5] magrittr_2.0.3              spatstat.utils_3.0-3        #>   [7] magick_2.7.4                farver_2.1.1                #>   [9] nloptr_2.0.3                rmarkdown_2.24              #>  [11] fs_1.6.3                    zlibbioc_1.46.0             #>  [13] ragg_1.2.5                  vctrs_0.6.3                 #>  [15] memoise_2.0.1               minqa_1.2.5                 #>  [17] spatstat.explore_3.2-1      DelayedMatrixStats_1.22.5   #>  [19] RCurl_1.98-1.12             rstatix_0.7.2               #>  [21] htmltools_0.5.5             S4Arrays_1.0.4              #>  [23] broom_1.0.5                 Rhdf5lib_1.22.0             #>  [25] rhdf5_2.44.0                sass_0.4.7                  #>  [27] bslib_0.5.1                 desc_1.4.2                  #>  [29] plyr_1.8.8                  cachem_1.0.8                #>  [31] lifecycle_1.0.3             pkgconfig_2.0.3             #>  [33] Matrix_1.6-0                R6_2.5.1                    #>  [35] fastmap_1.1.1               GenomeInfoDbData_1.2.10     #>  [37] digest_0.6.31               numDeriv_2016.8-1.1         #>  [39] colorspace_2.1-0            tensor_1.5                  #>  [41] rprojroot_2.0.3             dqrng_0.3.0                 #>  [43] textshaping_0.3.6           ggpubr_0.6.0                #>  [45] beachmat_2.16.0             labeling_0.4.2              #>  [47] fansi_1.0.4                 spatstat.sparse_3.0-2       #>  [49] polyclip_1.10-4             abind_1.4-5                 #>  [51] mgcv_1.8-42                 compiler_4.3.1              #>  [53] withr_2.5.0                 backports_1.4.1             #>  [55] BiocParallel_1.34.2         carData_3.0-5               #>  [57] highr_0.10                  HDF5Array_1.28.1            #>  [59] ggforce_0.4.1               R.utils_2.12.2              #>  [61] ggsignif_0.6.4              MASS_7.3-60                 #>  [63] concaveman_1.1.0            DelayedArray_0.26.3         #>  [65] rjson_0.2.21                tools_4.3.1                 #>  [67] goftest_1.2-3               R.oo_1.25.0                 #>  [69] glue_1.6.2                  nlme_3.1-162                #>  [71] rhdf5filters_1.12.1         grid_4.3.1                  #>  [73] ClassifyR_3.4.9             reshape2_1.4.4              #>  [75] generics_0.1.3              gtable_0.3.4                #>  [77] spatstat.data_3.0-1         R.methodsS3_1.8.2           #>  [79] tidyr_1.3.0                 data.table_1.14.8           #>  [81] car_3.1-2                   utf8_1.2.3                  #>  [83] XVector_0.40.0              spatstat.geom_3.2-1         #>  [85] pillar_1.9.0                stringr_1.5.0               #>  [87] limma_3.56.2                splines_4.3.1               #>  [89] dplyr_1.1.2                 tweenr_2.0.2                #>  [91] lattice_0.21-8              deldir_1.0-9                #>  [93] survival_3.5-5              tidyselect_1.2.0            #>  [95] locfit_1.5-9.8              scuttle_1.10.1              #>  [97] knitr_1.43                  bookdown_0.35               #>  [99] edgeR_3.42.4                xfun_0.39                   #> [101] DropletUtils_1.20.0         pheatmap_1.0.12             #> [103] scam_1.2-14                 stringi_1.7.12              #> [105] yaml_2.3.7                  boot_1.3-28.1               #> [107] evaluate_0.21               codetools_0.2-19            #> [109] tibble_3.2.1                BiocManager_1.30.22         #> [111] cli_3.6.1                   systemfonts_1.0.4           #> [113] munsell_0.5.0               jquerylib_0.1.4             #> [115] Rcpp_1.0.10                 spatstat.random_3.1-5       #> [117] parallel_4.3.1              pkgdown_2.0.7               #> [119] sparseMatrixStats_1.12.0    bitops_1.0-7                #> [121] lme4_1.1-34                 SpatialExperiment_1.10.0    #> [123] lmerTest_3.1-3              scales_1.2.1                #> [125] purrr_1.0.2                 crayon_1.5.2                #> [127] rlang_1.1.1"},{"path":"https://ellispatrick.github.io/spicyR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas Canete. Author. Ellis Patrick. Author, maintainer.","code":""},{"path":"https://ellispatrick.github.io/spicyR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Canete N, Iyengar S, Ormerod J, Baharlou H, Harman , Patrick E (2022). “spicyR: spatial analysis situ cytometry data R.” Bioinformatics, 38(11), 3099–3105. doi:10.1093/bioinformatics/btac268, https://doi.org/10.1093/bioinformatics/btac268.","code":"@Article{,   title = {{spicyR: spatial analysis of in situ cytometry data in R}},   author = {Nicolas Canete and Sourish Iyengar and John Ormerod and Heeva Baharlou and Andrew Harman and Ellis Patrick},   year = {2022},   volume = {38},   number = {11},   pages = {3099–3105},   journal = {Bioinformatics},   doi = {10.1093/bioinformatics/btac268},   url = {https://doi.org/10.1093/bioinformatics/btac268}, }"},{"path":"https://ellispatrick.github.io/spicyR/index.html","id":"spicyr","dir":"","previous_headings":"","what":"Spatial analysis of in situ cytometry data","title":"Spatial analysis of in situ cytometry data","text":"Spatial analysis situ cytometry data.","code":""},{"path":"https://ellispatrick.github.io/spicyR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Spatial analysis of in situ cytometry data","text":"spicyR package provides framework performing inference changes spatial relationships pairs cell types cell-resolution spatial omics technologies. spicyR consists three primary steps: () summarizing degree spatial localization pairs cell types image; (ii) modelling variability localization summary statistics function cell counts (iii) testing changes spatial localizations associated response variable.","code":""},{"path":"https://ellispatrick.github.io/spicyR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial analysis of in situ cytometry data","text":"Bioconductor release version, run following. like --date features, install recent development version.","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"spicyR\") # Install the development version from Bioconductor: if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # The following initializes usage of Bioc devel # This will update all your Bioconductor packages to devel version BiocManager::install(version='devel')  BiocManager::install(\"spicyR\")  # Otherwise install the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"ellispatrick/spicyR\") library(spicyR)"},{"path":"https://ellispatrick.github.io/spicyR/index.html","id":"submitting-an-issue-or-feature-request","dir":"","previous_headings":"","what":"Submitting an issue or feature request","title":"Spatial analysis of in situ cytometry data","text":"spicyR still active development. greatly appreciate feedback related package. R package related issues raised . general questions feedback, please contact us directly via ellis.patrick@sydney.edu.au.","code":""},{"path":"https://ellispatrick.github.io/spicyR/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Spatial analysis of in situ cytometry data","text":"Nicolas Canete Ellis Patrick - @TheEllisPatrick","code":""},{"path":"https://ellispatrick.github.io/spicyR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Spatial analysis of in situ cytometry data","text":"Nicolas P Canete, Sourish S Iyengar, John T Ormerod, Heeva Baharlou, Andrew N Harman, Ellis Patrick, spicyR: spatial analysis situ cytometry data R, Bioinformatics, Volume 38, Issue 11, 1 June 2022, Pages 3099–3105, https://doi.org/10.1093/bioinformatics/btac268","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/Accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessors for SegmentedCells — Accessors","title":"Accessors for SegmentedCells — Accessors","text":"Methods access various components `SegmentedCells` object.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/Accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessors for SegmentedCells — Accessors","text":"","code":"cellSummary(x, imageID = NULL, bind = TRUE)  cellSummary(x, imageID = NULL) <- value  cellMarks(x, imageID = NULL, bind = TRUE)  cellMarks(x, imageID = NULL) <- value  cellMorph(x, imageID = NULL, bind = TRUE)  cellMorph(x, imageID = NULL) <- value  imagePheno(x, imageID = NULL, bind = TRUE, expand = FALSE)  imagePheno(x, imageID = NULL) <- value  imageID(x, imageID = NULL)  cellID(x, imageID = NULL)  cellID(x) <- value  imageCellID(x, imageID = NULL)  imageCellID(x) <- value  cellType(x, imageID = NULL)  cellType(x, imageID = NULL) <- value  filterCells(x, select)  cellAnnotation(x, variable, imageID = NULL)  cellAnnotation(x, variable, imageID = NULL) <- value"},{"path":"https://ellispatrick.github.io/spicyR/reference/Accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessors for SegmentedCells — Accessors","text":"x `SegmentedCells` object. imageID vector imageIDs specifically extract. bind false outputs list DataFrames split imageID expand Used expand phenotype information per image per cell. value relevant information used replace. select logical vector cells kept. variable variable add retrieve cellSummary.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/Accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessors for SegmentedCells — Accessors","text":"DataFrame list DataFrames","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/Accessors.html","id":"descriptions","dir":"Reference","previous_headings":"","what":"Descriptions","title":"Accessors for SegmentedCells — Accessors","text":"`cellSummary`: Retrieves DataFrame containing `x` `y` coordinates cell  well `cellID`, `imageID` `cellType`. imageID can used select  specific images bind=FALSE outputs information list split imageID. `cellMorph`: Retrieves DataFrame containing morphology information. `cellMarks`: Retrieves DataFrame containing intensity gene protein markers. `imagePheno`: Retrieves DataFrame containing phenotype information image.  Using expand = TRUE produce DataFrame number rows equal   number cells.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/Accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessors for SegmentedCells — Accessors","text":"","code":"### Something that resembles cellProfiler data  set.seed(51773)  n = 10  cells <- data.frame(row.names = seq_len(n)) cells$ObjectNumber <- seq_len(n) cells$ImageNumber <- rep(1:2,c(n/2,n/2)) cells$AreaShape_Center_X <- runif(n) cells$AreaShape_Center_Y <- runif(n) cells$AreaShape_round <- rexp(n) cells$AreaShape_diameter <- rexp(n, 2) cells$Intensity_Mean_CD8 <- rexp(n, 10) cells$Intensity_Mean_CD4 <- rexp(n, 10)  cellExp <- SegmentedCells(cells, cellProfiler = TRUE) #> There is no cellType column, setting to NA  ### Cluster cell types intensities <- cellMarks(cellExp) kM <- kmeans(intensities,2) cellType(cellExp) <- paste('cluster',kM$cluster, sep = '')  cellSummary(cellExp, imageID = 1) #> DataFrame with 5 rows and 6 columns #>    imageID      cellID imageCellID         x         y cellType #>   <factor> <character> <character> <numeric> <numeric> <factor> #> 1        1      cell_1      cell_1  0.367243  0.820150 cluster1 #> 2        1      cell_2      cell_2  0.613818  0.846200 cluster1 #> 3        1      cell_3      cell_3  0.335930  0.318286 cluster2 #> 4        1      cell_4      cell_4  0.501737  0.373931 cluster2 #> 5        1      cell_5      cell_5  0.829350  0.140415 cluster1"},{"path":"https://ellispatrick.github.io/spicyR/reference/as.data.frame.SegmentedCells.html","id":null,"dir":"Reference","previous_headings":"","what":"as.data.frame — as.data.frame.SegmentedCells","title":"as.data.frame — as.data.frame.SegmentedCells","text":"Function coerce SegmentedCells object data frame.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/as.data.frame.SegmentedCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.data.frame — as.data.frame.SegmentedCells","text":"","code":"# S3 method for SegmentedCells as.data.frame(x, ...)"},{"path":"https://ellispatrick.github.io/spicyR/reference/as.data.frame.SegmentedCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.data.frame — as.data.frame.SegmentedCells","text":"x SegmentedCells object. ... arguments.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/as.data.frame.SegmentedCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as.data.frame — as.data.frame.SegmentedCells","text":"data.frame ## Generate toy data set.seed(51773) x <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,              runif(200)+3,runif(200)+2,runif(200)+1,runif(200)),4)              y <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,                           runif(200),runif(200)+1,runif(200)+2,runif(200)+3),4) cellType <- factor(paste('c',rep(rep(c(1:2),rep(200,2)),4),sep = '')) imageID <- rep(c('s1', 's2'),c(800,800)) cells <- data.frame(x, y, cellType, imageID) ## Store data SegmentedCells object cellExp <- SegmentedCells(cells, cellTypeString = 'cellType') ## Generate LISA cellsDF <- .data.frame(cellExp) NULL","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/colTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a simple wilcoxon-rank-sum test or t-test on the columns of a data fram — colTest","title":"Perform a simple wilcoxon-rank-sum test or t-test on the columns of a data fram — colTest","text":"Perform simple wilcoxon-rank-sum test t-test columns data fram","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/colTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a simple wilcoxon-rank-sum test or t-test on the columns of a data fram — colTest","text":"","code":"colTest(df, condition, type = NULL, feature = NULL, imageID = \"imageID\")"},{"path":"https://ellispatrick.github.io/spicyR/reference/colTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a simple wilcoxon-rank-sum test or t-test on the columns of a data fram — colTest","text":"df data.frame SingleCellExperiment, SpatialExperiment condition condition interest type type test, \"wilcox\", \"ttest\" \"survival\". feature Can used calculate proportions feature image imageID imageID's presenting SingleCellExperiment","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/colTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a simple wilcoxon-rank-sum test or t-test on the columns of a data fram — colTest","text":"Proportions","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/colTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a simple wilcoxon-rank-sum test or t-test on the columns of a data fram — colTest","text":"","code":"# Test for an association with long-duration diabetes # This is clearly ignoring the repeated measures... data(\"diabetesData\") props <- getProp(diabetesData) condition <- imagePheno(diabetesData)$stage names(condition) <- imagePheno(diabetesData)$imageID condition <- condition[condition %in% c(\"Long-duration\", \"Onset\")] test <- colTest(props[names(condition), ], condition)"},{"path":"https://ellispatrick.github.io/spicyR/reference/diabetesData.html","id":null,"dir":"Reference","previous_headings":"","what":"Diabetes IMC data — diabetesData","title":"Diabetes IMC data — diabetesData","text":"subset Damond et al 2019 imaging mass cytometry dataset. data  contains cells pancreatic islets individuals early onset  diabetes healthy controls.  object contains single-cell data 160 images 8 subjects,  20 images per subject.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/diabetesData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diabetes IMC data — diabetesData","text":"","code":"diabetesData"},{"path":"https://ellispatrick.github.io/spicyR/reference/diabetesData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Diabetes IMC data — diabetesData","text":"diabetesData SegmentedCells object","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/diabetesData_SCE.html","id":null,"dir":"Reference","previous_headings":"","what":"Diabetes IMC data in SCE format. — diabetesData_SCE","title":"Diabetes IMC data in SCE format. — diabetesData_SCE","text":"subset Damond et al 2019 imaging mass cytometry dataset. data  contains cells pancreatic islets individuals early onset  diabetes healthy controls.  object contains single-cell data 160 images 8 subjects,  20 images per subject.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/diabetesData_SCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diabetes IMC data in SCE format. — diabetesData_SCE","text":"","code":"diabetesData_SCE"},{"path":"https://ellispatrick.github.io/spicyR/reference/diabetesData_SCE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Diabetes IMC data in SCE format. — diabetesData_SCE","text":"diabetesData_SCE SingleCellExperiment object","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/diabetesData_SCE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diabetes IMC data in SCE format. — diabetesData_SCE","text":"Converted SingleCellExperiment format.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/getPairwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Get statistic from pairwise L curve of a single image. — getPairwise","title":"Get statistic from pairwise L curve of a single image. — getPairwise","text":"Get statistic pairwise L curve single image.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/getPairwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get statistic from pairwise L curve of a single image. — getPairwise","text":"","code":"getPairwise(   cells,   from = NULL,   to = NULL,   dist = NULL,   window = \"convex\",   window.length = NULL,   Rs = c(20, 50, 100),   sigma = NULL,   minLambda = 0.05,   fast = TRUE,   edgeCorrect = TRUE,   includeZeroCells = TRUE,   BPPARAM = BiocParallel::SerialParam(),   imageID = \"imageID\",   cellType = \"cellType\",   spatialCoords = c(\"x\", \"y\") )"},{"path":"https://ellispatrick.github.io/spicyR/reference/getPairwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get statistic from pairwise L curve of a single image. — getPairwise","text":"cells SegmentedCells data frame contains least variables x y, giving location coordinates cell, cellType. '' cellType generating L curve. '' cellType generating L curve. dist distance statistic obtained. window window around regions 'square', 'convex' 'concave'. window.length tuning parameter controlling level concavity estimating concave windows. Rs vector radii measures association calculated. sigma numeric variable used scaling fitting inhomogeneous L-curves. minLambda Minimum value density scaling fitting inhomogeneous L-curves. fast logical describing whether use fast approximation inhomogeneous L-curves. edgeCorrect logical indicating whether perform edge correction. includeZeroCells logical indicating whether include cells zero counts pairwise association calculation. BPPARAM BiocParallelParam object. imageID imageID using SingleCellExperiment SpatialExperiment. cellType cellType using SingleCellExperiment SpatialExperiment. spatialCoords spatialCoords using SingleCellExperiment SpatialExperiment.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/getPairwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get statistic from pairwise L curve of a single image. — getPairwise","text":"Statistic pairwise L curve single image.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/getPairwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get statistic from pairwise L curve of a single image. — getPairwise","text":"","code":"data(\"diabetesData\") pairAssoc <- getPairwise(diabetesData[1, ])"},{"path":"https://ellispatrick.github.io/spicyR/reference/getProp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get proportions from a SegmentedCells, SingleCellExperiment, SpatialExperiment or data.frame. — getProp","title":"Get proportions from a SegmentedCells, SingleCellExperiment, SpatialExperiment or data.frame. — getProp","text":"Get proportions SegmentedCells, SingleCellExperiment, SpatialExperiment data.frame.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/getProp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get proportions from a SegmentedCells, SingleCellExperiment, SpatialExperiment or data.frame. — getProp","text":"","code":"getProp(cells, feature = \"cellType\", imageID = \"imageID\")"},{"path":"https://ellispatrick.github.io/spicyR/reference/getProp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get proportions from a SegmentedCells, SingleCellExperiment, SpatialExperiment or data.frame. — getProp","text":"cells SegmentedCells, SingleCellExperiment, SpatialExperiment data.frame feature feature interest imageID imageID's","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/getProp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get proportions from a SegmentedCells, SingleCellExperiment, SpatialExperiment or data.frame. — getProp","text":"Proportions","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/getProp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get proportions from a SegmentedCells, SingleCellExperiment, SpatialExperiment or data.frame. — getProp","text":"","code":"data(\"diabetesData\") prop <- getProp(diabetesData)"},{"path":"https://ellispatrick.github.io/spicyR/reference/plot-SegmentedCells.html","id":null,"dir":"Reference","previous_headings":"","what":"A basic plot for SegmentedCells object — plot,SegmentedCells,ANY-method","title":"A basic plot for SegmentedCells object — plot,SegmentedCells,ANY-method","text":"function generates basic x-y plot location coordinates cellType data.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/plot-SegmentedCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A basic plot for SegmentedCells object — plot,SegmentedCells,ANY-method","text":"","code":"# S4 method for SegmentedCells,ANY plot(x, imageID = NULL)"},{"path":"https://ellispatrick.github.io/spicyR/reference/plot-SegmentedCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A basic plot for SegmentedCells object — plot,SegmentedCells,ANY-method","text":"x SegmentedCells object. imageID image plotted.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/plot-SegmentedCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A basic plot for SegmentedCells object — plot,SegmentedCells,ANY-method","text":"ggplot object.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/plot-SegmentedCells.html","id":"usage","dir":"Reference","previous_headings":"","what":"usage","title":"A basic plot for SegmentedCells object — plot,SegmentedCells,ANY-method","text":"`plot(x, imageID = NULL)`","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/plot-SegmentedCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A basic plot for SegmentedCells object — plot,SegmentedCells,ANY-method","text":"","code":"### Something that resembles cellProfiler data  set.seed(51773)  n = 10  cells <- data.frame(row.names = seq_len(n)) cells$ObjectNumber <- seq_len(n) cells$ImageNumber <- rep(1:2,c(n/2,n/2)) cells$AreaShape_Center_X <- runif(n) cells$AreaShape_Center_Y <- runif(n) cells$AreaShape_round <- rexp(n) cells$AreaShape_diameter <- rexp(n, 2) cells$Intensity_Mean_CD8 <- rexp(n, 10) cells$Intensity_Mean_CD4 <- rexp(n, 10)  cellExp <- SegmentedCells(cells, cellProfiler = TRUE) #> There is no cellType column, setting to NA  ### Cluster cell types markers <- cellMarks(cellExp) kM <- kmeans(markers,2) cellType(cellExp) <- paste('cluster',kM$cluster, sep = '')  #plot(cellExp, imageID=1)"},{"path":"https://ellispatrick.github.io/spicyR/reference/SegmentedCells.html","id":null,"dir":"Reference","previous_headings":"","what":"The SegmentedCells class — SegmentedCells-class","title":"The SegmentedCells class — SegmentedCells-class","text":"SegmentedCells S4 class storing data segmented imaging cytometry spatial omics data. extends DataFrame defines methods take advantage DataFrame nesting represent elements cell-based experiments spatial orientation commonly encountered. object able store information cell's spatial location, cellType, morphology, intensity gene/protein markers well image level phenotype information.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/SegmentedCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The SegmentedCells class — SegmentedCells-class","text":"","code":"SegmentedCells(   cellData,   cellProfiler = FALSE,   spatialCoords = c(\"x\", \"y\"),   cellTypeString = \"cellType\",   intensityString = \"intensity_\",   morphologyString = \"morphology_\",   phenotypeString = \"phenotype_\",   cellIDString = \"cellID\",   cellAnnotations = NULL,   imageCellIDString = \"imageCellID\",   imageIDString = \"imageID\",   verbose = TRUE )"},{"path":"https://ellispatrick.github.io/spicyR/reference/SegmentedCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The SegmentedCells class — SegmentedCells-class","text":"cellData data frame contains least columns x y giving  location coordinates cell. cellProfiler logical indicating cellData format similar  cellProfiler outputs. spatialCoords column names corresponding spatial coordinates.  eg. x, y, z... cellTypeString name column contains cell type calls. intensityString string can used identify columns  contain marker intensities. (needs extended take  column names .) morphologyString string can used identify columns  contains morphology information. phenotypeString string can used identify columns  contains phenotype information. cellIDString column name cellID. cellAnnotations vector variables provide additional  annotation cell. imageCellIDString column name imageCellID. imageIDString column name imageIDString. verbose logical indicating whether output messages.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/SegmentedCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The SegmentedCells class — SegmentedCells-class","text":"SegmentedCells object","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/SegmentedCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The SegmentedCells class — SegmentedCells-class","text":"","code":"### Something that resembles cellProfiler data  set.seed(51773)  n = 10  cells <- data.frame(row.names = seq_len(n)) cells$ObjectNumber <- seq_len(n) cells$ImageNumber <- rep(seq_len(2),c(n/2,n/2)) cells$AreaShape_Center_X <- runif(n) cells$AreaShape_Center_Y <- runif(n) cells$AreaShape_round <- rexp(n) cells$AreaShape_diameter <- rexp(n, 2) cells$Intensity_Mean_CD8 <- rexp(n, 10) cells$Intensity_Mean_CD4 <- rexp(n, 10)  cellExp <- SegmentedCells(cells, cellProfiler = TRUE) #> There is no cellType column, setting to NA  ### Cluster cell types intensities <- cellMarks(cellExp) kM <- kmeans(intensities,2) cellType(cellExp) <- paste('cluster',kM$cluster, sep = '') cellSummary(cellExp) #> DataFrame with 10 rows and 6 columns #>     imageID      cellID imageCellID         x         y cellType #>    <factor> <character> <character> <numeric> <numeric> <factor> #> 1         1      cell_1      cell_1  0.367243  0.820150 cluster1 #> 2         1      cell_2      cell_2  0.613818  0.846200 cluster1 #> 3         1      cell_3      cell_3  0.335930  0.318286 cluster2 #> 4         1      cell_4      cell_4  0.501737  0.373931 cluster2 #> 5         1      cell_5      cell_5  0.829350  0.140415 cluster1 #> 6         2      cell_6      cell_6  0.831271  0.175128 cluster1 #> 7         2      cell_7      cell_7  0.130342  0.818145 cluster2 #> 8         2      cell_8      cell_8  0.217023  0.404770 cluster2 #> 9         2      cell_9      cell_9  0.353071  0.477812 cluster2 #> 10        2     cell_10     cell_10  0.508326  0.514886 cluster2"},{"path":"https://ellispatrick.github.io/spicyR/reference/show-SegmentedCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Show SegmentedCells — show-SegmentedCells","title":"Show SegmentedCells — show-SegmentedCells","text":"outputs critical information aSegmentedCells.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/show-SegmentedCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show SegmentedCells — show-SegmentedCells","text":"object SegmentedCells.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/show-SegmentedCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show SegmentedCells — show-SegmentedCells","text":"Information number images, cells, intenisties, morphologies phenotypes.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/show-SegmentedCells.html","id":"usage","dir":"Reference","previous_headings":"","what":"usage","title":"Show SegmentedCells — show-SegmentedCells","text":"`show(object)`","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/show-SegmentedCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show SegmentedCells — show-SegmentedCells","text":"","code":"### Something that resembles cellProfiler data  set.seed(51773)  n = 10  cells <- data.frame(row.names = seq_len(n)) cells$ObjectNumber <- seq_len(n) cells$ImageNumber <- rep(1:2,c(n/2,n/2)) cells$AreaShape_Center_X <- runif(n) cells$AreaShape_Center_Y <- runif(n) cells$AreaShape_round <- rexp(n) cells$AreaShape_diameter <- rexp(n, 2) cells$Intensity_Mean_CD8 <- rexp(n, 10) cells$Intensity_Mean_CD4 <- rexp(n, 10)  cellExp <- SegmentedCells(cells, cellProfiler = TRUE) #> There is no cellType column, setting to NA  ### Cluster cell types markers <- cellMarks(cellExp) kM <- kmeans(markers,2) cellType(cellExp) <- paste('cluster',kM$cluster, sep = '')  cellExp #> A SegmentedCells object with...  #> Number of images:2 #> Number of cells:10 #> Number of cell types: 2 [ cluster1, cluster2 ] #> Number of intensities: 2 [ CD8, CD4 ] #> Number of morphologies: 2 [ round, diameter ] #> Number of image phenotypes: 0 [ ]"},{"path":"https://ellispatrick.github.io/spicyR/reference/signifPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots result of signifPlot. — signifPlot","title":"Plots result of signifPlot. — signifPlot","text":"Plots result signifPlot.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/signifPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots result of signifPlot. — signifPlot","text":"","code":"signifPlot(   results,   fdr = FALSE,   type = \"bubble\",   breaks = NULL,   colours = c(\"#4575B4\", \"white\", \"#D73027\"),   marksToPlot = NULL,   cutoff = 0.05 )"},{"path":"https://ellispatrick.github.io/spicyR/reference/signifPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots result of signifPlot. — signifPlot","text":"results Data frame obtained spicy. fdr TRUE FDR correction used. type make bubble plot heatmap. breaks Vector 3 numbers giving breaks used pheatmap. first  number minimum, second maximum, third number breaks. colours Vector colours use pheatmap. marksToPlot Vector marks include pheatmap. cutoff significance threshold circles bubble plot","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/signifPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots result of signifPlot. — signifPlot","text":"pheatmap object","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/signifPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots result of signifPlot. — signifPlot","text":"","code":"data(spicyTest) signifPlot(spicyTest, breaks=c(-3, 3, 0.5))"},{"path":"https://ellispatrick.github.io/spicyR/reference/spicy.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs spatial tests on spatial cytometry data. — SpicyResults-class","title":"Performs spatial tests on spatial cytometry data. — SpicyResults-class","text":"Performs spatial tests spatial cytometry data.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/spicy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs spatial tests on spatial cytometry data. — SpicyResults-class","text":"","code":"spicy(   cells,   condition = NULL,   subject = NULL,   covariates = NULL,   from = NULL,   to = NULL,   dist = NULL,   alternateResult = NULL,   integrate = TRUE,   nsim = NULL,   verbose = TRUE,   weights = TRUE,   weightsByPair = FALSE,   weightFactor = 1,   window = \"convex\",   window.length = NULL,   BPPARAM = BiocParallel::SerialParam(),   sigma = NULL,   Rs = NULL,   minLambda = 0.05,   fast = TRUE,   edgeCorrect = TRUE,   includeZeroCells = FALSE,   imageID = \"imageID\",   cellType = \"cellType\",   spatialCoords = c(\"x\", \"y\"),   ... )"},{"path":"https://ellispatrick.github.io/spicyR/reference/spicy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs spatial tests on spatial cytometry data. — SpicyResults-class","text":"cells SegmentedCells data frame contains least  variables x y, giving location coordinates cell, cellType. condition Vector conditions tested corresponding image cells data frame. subject Vector subject IDs corresponding image cells data frame. covariates Vector covariate names included mixed effects model fixed effects. vector cell types like compare vector vector cell types like compare vector dist distance statistic obtained. alternateResult alternative result form data matrix used comparison. integrate statistic integral 0 dist, value L curve dist. nsim Number simulations perform. empty, p-value lmerTest used. verbose logical indicating whether output messages. weights logical indicating whether include weights based cell counts. weightsByPair logical indicating whether weights calculated cell type pair. weightFactor numeric controls convexity weight function. window window around regions 'square', 'convex' 'concave'. window.length tuning parameter controlling level concavity estimating concave windows. BPPARAM BiocParallelParam object. sigma numeric variable used scaling fitting inhomogeneous L-curves. Rs vector radii measures association calculated. minLambda Minimum value density scaling fitting inhomogeneous L-curves. fast logical describing whether use fast approximation inhomogeneous L-curves. edgeCorrect logical indicating whether perform edge correction. includeZeroCells logical indicating whether include cells zero counts pairwise association calculation. imageID image ID using SingleCellExperiment. cellType cell type using SingleCellExperiment. spatialCoords spatial coordinates using SingleCellExperiment. ... options pass bootstrap.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/spicy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs spatial tests on spatial cytometry data. — SpicyResults-class","text":"Data frame p-values.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/spicy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs spatial tests on spatial cytometry data. — SpicyResults-class","text":"","code":"data(\"diabetesData\")  # Test with random effect for patient on only one pairwise combination of cell types. spicy(diabetesData,     condition = \"stage\", subject = \"case\",     from = \"Tc\", to = \"Th\" ) #> Testing for spatial differences across conditions accounting for multiple images per subject #>  #> Number of cell type pairs: 1 #> Number of differentially localised cell type pairs:  #> [1] 0  # Test all pairwise combination of cell types without random effect of patient. # spicyTest <- spicy(diabetesData, condition = \"stage\", subject = \"case\")  # Test all pairwise combination of cell types with random effect of patient. # spicy(diabetesData, condition = \"condition\", subject = \"subject\")  # Test all pairwise combination of cell types with random effect of patient using # a bootstrap to calculate significance. # spicy(diabetesData, condition = \"stage\", subject = \"case\", nsim = 10000)"},{"path":"https://ellispatrick.github.io/spicyR/reference/spicyTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from spicy for diabetesData — spicyTest","title":"Results from spicy for diabetesData — spicyTest","text":"Results call: spicyTest <- spicy(diabetesData,                     condition = \"condition\",                     subject = \"subject\")","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/spicyTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from spicy for diabetesData — spicyTest","text":"","code":"spicyTest"},{"path":"https://ellispatrick.github.io/spicyR/reference/spicyTest.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results from spicy for diabetesData — spicyTest","text":"spicyTest spicy object","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/spicyTestBootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from spicy with bootstrap for diabetesData — spicyTestBootstrap","title":"Results from spicy with bootstrap for diabetesData — spicyTestBootstrap","text":"Results call: spicyTestBootstrap <- spicy(diabetesData,                             condition = \"condition\",                             subject = \"subject\",                             nsim = 199)","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/spicyTestBootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from spicy with bootstrap for diabetesData — spicyTestBootstrap","text":"","code":"spicyTestBootstrap"},{"path":"https://ellispatrick.github.io/spicyR/reference/spicyTestBootstrap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results from spicy with bootstrap for diabetesData — spicyTestBootstrap","text":"spicyTestBootstrap spicy object","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/topPairs.html","id":null,"dir":"Reference","previous_headings":"","what":"A table of the significant results from spicy tests — topPairs","title":"A table of the significant results from spicy tests — topPairs","text":"table significant results spicy tests","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/topPairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A table of the significant results from spicy tests — topPairs","text":"","code":"topPairs(x, coef = NULL, n = 10, adj = \"fdr\", cutoff = NULL)"},{"path":"https://ellispatrick.github.io/spicyR/reference/topPairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A table of the significant results from spicy tests — topPairs","text":"x output spicy. coef coefficient list. n Extract top n significant pairs. adj p-value adjustment method use, argument p.adjust(). cutoff p-value threshold extract significant pairs.","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/topPairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A table of the significant results from spicy tests — topPairs","text":"data.frame","code":""},{"path":"https://ellispatrick.github.io/spicyR/reference/topPairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A table of the significant results from spicy tests — topPairs","text":"","code":"data(spicyTest) topPairs(spicyTest) #>                   intercept coefficient      p.value adj.pvalue       from #> Th_Th             -8.550349   55.505421 0.0002069040 0.03207907         Th #> beta_ductal      -19.461966   10.416870 0.0005559049 0.03207907       beta #> ductal_beta      -19.407845   10.382899 0.0005695262 0.03207907     ductal #> delta_beta       101.111037  -30.418789 0.0006118914 0.03207907      delta #> beta_delta       101.052488  -30.370186 0.0006265444 0.03207907       beta #> unknown_beta      -6.704261    8.546938 0.0010115597 0.03891502    unknown #> beta_unknown      -6.686305    8.505666 0.0010640825 0.03891502       beta #> gamma_neutrophil  -3.234976  -19.102452 0.0229478395 0.39078920      gamma #> neutrophil_gamma  -3.228265  -19.065803 0.0230795918 0.39078920 neutrophil #> ductal_Th         -1.454500  -10.508455 0.0268678016 0.39078920     ductal #>                          to #> Th_Th                    Th #> beta_ductal          ductal #> ductal_beta            beta #> delta_beta             beta #> beta_delta            delta #> unknown_beta           beta #> beta_unknown        unknown #> gamma_neutrophil neutrophil #> neutrophil_gamma      gamma #> ductal_Th                Th"}]
